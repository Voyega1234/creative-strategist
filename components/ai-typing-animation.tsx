"use client"

import { useEffect, useState } from "react"
import { Sparkles, Zap } from "lucide-react"

interface AITypingAnimationProps {
  activeClientName: string
}

export function AITypingAnimation({ activeClientName }: AITypingAnimationProps) {
  const [currentText, setCurrentText] = useState("")
  const [currentIndex, setCurrentIndex] = useState(0)
  const [showCursor, setShowCursor] = useState(true)

  const messages = [
    "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏ô‡∏∏‡∏Å‡πÜ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà...",
    "‡∏Ç‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏•‡∏¢!",
    "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à...",
    "AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏£‡∏∏‡πà‡∏ô‡∏Ñ‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à üòå",
    "‡∏Ç‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≠‡∏á‡∏Å‡∏•‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á...",
    "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏•‡∏±‡∏á‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡∏π‡πà!",
    "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì...",
    "‡∏Ç‡∏≠‡πÄ‡∏ö‡∏£‡∏ô‡∏™‡∏ï‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏õ‡πä‡∏ö‡∏ô‡∏∂‡∏á‡∏ô‡∏∞ üòÑ",
    "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...",
    "‡∏Ñ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏µ‡πÄ‡∏≠‡∏ó‡∏µ‡∏ü ‚ú®"
  ];
  

  const currentMessage = messages[Math.floor(currentIndex / 40) % messages.length]

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentIndex(prev => prev + 1)
      
      const messageIndex = Math.floor(currentIndex / 40) % messages.length
      const charIndex = currentIndex % 40
      const targetMessage = messages[messageIndex]
      
      if (charIndex < targetMessage.length) {
        setCurrentText(targetMessage.slice(0, charIndex + 1))
      } else {
        setCurrentText(targetMessage + ".")
      }
    }, 100)

    return () => clearInterval(interval)
  }, [currentIndex, messages])

  useEffect(() => {
    const cursorInterval = setInterval(() => {
      setShowCursor(prev => !prev)
    }, 500)

    return () => clearInterval(cursorInterval)
  }, [])

  return (
    <div className="flex flex-col items-center justify-center min-h-[60vh] text-center">
      <div className="bg-white/80 backdrop-blur-md rounded-2xl p-12 shadow-lg border border-white/20 max-w-2xl w-full">
        {/* Animated Icon */}
        <div className="flex justify-center mb-8">
          <div className="relative">
            <div className="absolute inset-0 bg-gradient-to-r from-[#7f56d9] to-[#9e77ed] rounded-full animate-pulse opacity-20 scale-110"></div>
            <div className="relative bg-gradient-to-r from-[#7f56d9] to-[#9e77ed] p-6 rounded-full">
              <Sparkles className="h-8 w-8 text-white animate-spin" />
            </div>
          </div>
        </div>

        {/* Client Name */}
        <div className="mb-6">
          <h2 className="text-xl font-semibold text-[#000000] mb-2">
            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö
          </h2>
          <div className="inline-flex items-center px-4 py-2 bg-[#e9d7fe] text-[#6941c6] rounded-full font-medium mb-3">
            <Zap className="w-4 h-4 mr-2" />
            {activeClientName}
          </div>
          <p className="text-sm text-[#8e8e93] font-medium">
            ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ
          </p>
        </div>

        {/* Typing Animation */}
        <div className="mb-8">
          <div className="text-lg text-[#535862] font-medium min-h-[1.5rem] flex items-center justify-center">
            <span>{currentText}</span>
            <span className={`ml-1 text-[#7f56d9] ${showCursor ? 'opacity-100' : 'opacity-0'} transition-opacity`}>
              |
            </span>
          </div>
        </div>

        {/* Progress Dots */}
        <div className="flex justify-center space-x-2">
          {[0, 1, 2].map((index) => (
            <div
              key={index}
              className={`w-3 h-3 rounded-full transition-all duration-300 ${
                (currentIndex + index) % 3 === 0
                  ? 'bg-[#7f56d9] scale-125'
                  : 'bg-[#e4e7ec]'
              }`}
            />
          ))}
        </div>

        {/* Fun fact or tip */}
        <div className="mt-8 p-4 bg-[#f8fafc] rounded-lg border border-[#e4e7ec]">
          <p className="text-sm text-[#535862] italic">
            üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á
          </p>
        </div>
      </div>
    </div>
  )
}